name: Deploy
on:
  push:
    branches: [main, release]
    paths-ignore: ['**.md']
  pull_request:
    branches: [main]
    paths-ignore: ['**.md']

defaults:
  run:
    shell: bash

permissions:
  pull-requests: write

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/workflows/setup
      - name: Install wrangler globally
        run: pnpm install -g wrangler@3

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            api: &api
              - 'api/**'
              - 'shared/**'
            cdn: &cdn
              - *api
              - 'components/**'
              - 'embed/**'
              - 'cdn/**'
            frontend:
              - *api
              - *cdn
              - 'frontend/**'

      - name: Create deploy comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: 'console.log(1)'


      #region Deploy

      # cdn (embed) needs: API_URL, APP_URL (infer from API_URL to prevent cycle)
      # frontend (app) needs: CDN_URL, ?API_URL
      # api needs: nothing (APP_URL is passed from embed)
      #
      # build/deploy sequence:
      # 1. api
      # 2. cdn (embed)
      # 3. frontend

      - name: Deploy API
        uses: ./.github/workflows/deploy-worker
        id: api
        with:
          name: 'api'
          changed: ${{ steps.changes.outputs.api }}
          mode: 'preview'
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          stagingUrl: 'https://staging-publisher-tools-api.webmonetization.workers.dev'
          productionUrl: 'https://api.webmonetization.org'

      - name: Deploy CDN
        uses: ./.github/workflows/deploy-worker
        id: cdn
        with:
          name: 'cdn'
          changed: ${{ steps.changes.outputs.cdn }}
          mode: 'preview'
          build: 'pnpm -C embed run build && pnpm -C cdn run build'
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          stagingUrl: 'https://staging-publisher-tools-cdn.webmonetization.workers.dev'
          productionUrl: 'https://cdn.webmonetization.org'
          BUILD_API_URL: ${{ steps.api.outputs.url }}

      - name: Deploy Frontend
        uses: ./.github/workflows/deploy-worker
        id: frontend
        with:
          name: 'frontend'
          changed: ${{ steps.changes.outputs.frontend }}
          mode: 'preview'
          build: 'pnpm -C frontend run build'
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          stagingUrl: 'https://staging-publisher-tools.webmonetization.workers.dev'
          productionUrl: 'https://webmonetization.org'
          BUILD_API_URL: ${{ steps.api.outputs.url }}
          BUILD_CDN_URL: ${{ steps.cdn.outputs.url }}
      #endregion

      - name: Create deploy comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: 'console.log(2)'

      - name: Create Job summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            core.summary.addHeading('Deployment results', 'h2');
            core.summary.addRaw(`
            | Worker | URL                                            |
            | ------ | ---------------------------------------------- |
            | API    | ${getText('${{ steps.api.outputs.url }}', '${{ steps.api.outcome }}')} |
            | CDN    | ${getText('${{ steps.cdn.outputs.url }}', '${{ steps.cdn.outcome }}')} |
            | App    | ${getText('${{ steps.frontend.outputs.url }}', '${{ steps.frontend.outcome }}')} |
            `);
            await core.summary.write();

            function getText(url, outcome) {
              if (url) {
                const RE = /^https?:\/\/([a-z0-9]+)-/i;
                const text = url.match(RE)?.[1] ?? url;
                return `[${text}](${url})`;
              }
              return outcome;
            }
